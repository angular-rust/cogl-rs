// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{Bool, PixelFormat, TextureComponents};
use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Texture(Interface<ffi::CoglTexture>);

    match fn {
        get_type => || ffi::cogl_texture_get_gtype(),
    }
}

pub const NONE_TEXTURE: Option<&Texture> = None;

pub trait TextureExt: 'static {
    fn allocate(&self) -> Result<Bool, glib::Error>;

    fn get_components(&self) -> TextureComponents;

    fn get_data(&self, format: PixelFormat, rowstride: u32) -> (i32, u8);

    fn get_gl_texture(&self) -> (Bool, u32, u32);

    fn get_height(&self) -> u32;

    fn get_max_waste(&self) -> i32;

    fn get_premultiplied(&self) -> Bool;

    fn get_width(&self) -> u32;

    fn is_sliced(&self) -> Bool;

    fn set_components(&self, components: TextureComponents);

    fn set_premultiplied(&self, premultiplied: Bool);

    fn set_region(
        &self,
        src_x: i32,
        src_y: i32,
        dst_x: i32,
        dst_y: i32,
        dst_width: u32,
        dst_height: u32,
        width: i32,
        height: i32,
        format: PixelFormat,
        rowstride: u32,
        data: &mut u8,
    ) -> Bool;
}

impl<O: IsA<Texture>> TextureExt for O {
    fn allocate(&self) -> Result<Bool, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::cogl_texture_allocate(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(ret)
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn get_components(&self) -> TextureComponents {
        unsafe {
            from_glib(ffi::cogl_texture_get_components(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_data(&self, format: PixelFormat, rowstride: u32) -> (i32, u8) {
        unsafe {
            let mut data = mem::MaybeUninit::uninit();
            let ret = ffi::cogl_texture_get_data(
                self.as_ref().to_glib_none().0,
                format.to_glib(),
                rowstride,
                data.as_mut_ptr(),
            );
            let data = data.assume_init();
            (ret, data)
        }
    }

    fn get_gl_texture(&self) -> (Bool, u32, u32) {
        unsafe {
            let mut out_gl_handle = mem::MaybeUninit::uninit();
            let mut out_gl_target = mem::MaybeUninit::uninit();
            let ret = ffi::cogl_texture_get_gl_texture(
                self.as_ref().to_glib_none().0,
                out_gl_handle.as_mut_ptr(),
                out_gl_target.as_mut_ptr(),
            );
            let out_gl_handle = out_gl_handle.assume_init();
            let out_gl_target = out_gl_target.assume_init();
            (ret, out_gl_handle, out_gl_target)
        }
    }

    fn get_height(&self) -> u32 {
        unsafe { ffi::cogl_texture_get_height(self.as_ref().to_glib_none().0) }
    }

    fn get_max_waste(&self) -> i32 {
        unsafe { ffi::cogl_texture_get_max_waste(self.as_ref().to_glib_none().0) }
    }

    fn get_premultiplied(&self) -> Bool {
        unsafe { ffi::cogl_texture_get_premultiplied(self.as_ref().to_glib_none().0) }
    }

    fn get_width(&self) -> u32 {
        unsafe { ffi::cogl_texture_get_width(self.as_ref().to_glib_none().0) }
    }

    fn is_sliced(&self) -> Bool {
        unsafe { ffi::cogl_texture_is_sliced(self.as_ref().to_glib_none().0) }
    }

    fn set_components(&self, components: TextureComponents) {
        unsafe {
            ffi::cogl_texture_set_components(
                self.as_ref().to_glib_none().0,
                components.to_glib(),
            );
        }
    }

    fn set_premultiplied(&self, premultiplied: Bool) {
        unsafe {
            ffi::cogl_texture_set_premultiplied(self.as_ref().to_glib_none().0, premultiplied);
        }
    }

    fn set_region(
        &self,
        src_x: i32,
        src_y: i32,
        dst_x: i32,
        dst_y: i32,
        dst_width: u32,
        dst_height: u32,
        width: i32,
        height: i32,
        format: PixelFormat,
        rowstride: u32,
        data: &mut u8,
    ) -> Bool {
        unsafe {
            ffi::cogl_texture_set_region(
                self.as_ref().to_glib_none().0,
                src_x,
                src_y,
                dst_x,
                dst_y,
                dst_width,
                dst_height,
                width,
                height,
                format.to_glib(),
                rowstride,
                data,
            )
        }
    }
}

impl fmt::Display for Texture {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Texture")
    }
}
